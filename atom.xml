<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>dyhu&#39;s blog</title>
  
  
  <link href="https://okayhu.github.io/blog/atom.xml" rel="self"/>
  
  <link href="https://okayhu.github.io/blog/"/>
  <updated>2023-01-08T14:07:22.189Z</updated>
  <id>https://okayhu.github.io/blog/</id>
  
  <author>
    <name>dyhu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>How To Customize Parameter Names When  Binding Spring MVC Command Objects</title>
    <link href="https://okayhu.github.io/blog/posts/2022/spring-mvc-binding-object/"/>
    <id>https://okayhu.github.io/blog/posts/2022/spring-mvc-binding-object/</id>
    <published>2022-12-30T10:56:05.000Z</published>
    <updated>2023-01-08T14:07:22.189Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h2><p>Spring provides <code>@RequestParam</code> to bind Query parameters, and can bind parameters with different names.</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/page&quot;)</span>pulic Page <span class="hljs-title function_">page</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;current_page&quot;)</span> Integer pageNum,</span><span class="hljs-params">                <span class="hljs-meta">@RequestParam(&quot;page_size&quot;)</span> Integer pageSize)</span> &#123;    ...&#125;</code></pre></div><p>However, when using objects to receive Query parameters, how do you bind parameters with different names?</p><p>This is the paging query object used to bind:</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PageQuery</span> &#123;    <span class="hljs-keyword">private</span> Integer pageNum;    <span class="hljs-keyword">private</span> Integer pageSize;&#125;</code></pre></div><p>Corresponding Spring MVC methods:</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/page&quot;)</span>pulic Page <span class="hljs-title function_">page</span><span class="hljs-params">(PageQuery pageQuery)</span> &#123;    ...&#125;</code></pre></div><p>It applies to <code>http://example.com/page?pageNum=1&amp;pageSize=10</code>, but not to the following URLs:</p><p><code>http://example.com/page?current_page=1&amp;page_size=10</code></p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>To solve this problem above, we need to customize <code>HandlerMethodArgumentResolver</code> and add it to Spring MVC ArgumentResolvers</p><h3 id="Customized-DataBinder"><a href="#Customized-DataBinder" class="headerlink" title="Customized DataBinder"></a>Customized DataBinder</h3><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RequestParamNameDataBinder</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ServletRequestDataBinder</span> &#123;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Map&lt;String, String&gt; requestParamNameMapping;    <span class="hljs-keyword">public</span> <span class="hljs-title function_">RequestParamNameDataBinder</span><span class="hljs-params">(Object target, String objectName,</span><span class="hljs-params">                                      Map&lt;String, String&gt; requestParamNameMapping)</span> &#123;        <span class="hljs-built_in">super</span>(target, objectName);        <span class="hljs-built_in">this</span>.requestParamNameMapping = requestParamNameMapping;    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addBindValues</span><span class="hljs-params">(<span class="hljs-meta">@NotNull</span> MutablePropertyValues mpvs,</span><span class="hljs-params">                                 <span class="hljs-meta">@NotNull</span> ServletRequest request)</span> &#123;        requestParamNameMapping.forEach((from, to) -&gt; &#123;            <span class="hljs-keyword">if</span> (mpvs.contains(from)) &#123;                <span class="hljs-type">PropertyValue</span> <span class="hljs-variable">propertyValue</span> <span class="hljs-operator">=</span> mpvs.getPropertyValue(from);                mpvs.add(to, propertyValue == <span class="hljs-literal">null</span> ? <span class="hljs-literal">null</span> : propertyValue.getValue());            &#125;        &#125;);    &#125;&#125;</code></pre></div><h3 id="Customized-parameter-processor"><a href="#Customized-parameter-processor" class="headerlink" title="Customized parameter processor"></a>Customized parameter processor</h3><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RequestParamNameMethodProcessor</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ServletModelAttributeMethodProcessor</span>    <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InitializingBean</span> &#123;    <span class="hljs-comment">// Rename cache</span>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Map&lt;Class&lt;?&gt;, Map&lt;String, String&gt;&gt; targetClassRequestParamNameMapping =        <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentHashMap</span>&lt;&gt;();    <span class="hljs-keyword">private</span> WebBindingInitializer webBindingInitializer;    <span class="hljs-meta">@Autowired(required = false)</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAdapter</span><span class="hljs-params">(RequestMappingHandlerAdapter adapter)</span> &#123;        <span class="hljs-built_in">this</span>.webBindingInitializer = adapter.getWebBindingInitializer();    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-title function_">RequestParamNameMethodProcessor</span><span class="hljs-params">(<span class="hljs-type">boolean</span> annotationNotRequired)</span> &#123;        <span class="hljs-built_in">super</span>(annotationNotRequired);    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">bindRequestParameters</span><span class="hljs-params">(<span class="hljs-meta">@NotNull</span> WebDataBinder binder,</span><span class="hljs-params">                                         <span class="hljs-meta">@NotNull</span> NativeWebRequest nativeWebRequest)</span> &#123;        <span class="hljs-built_in">super</span>.bindRequestParameters(binder, nativeWebRequest);        <span class="hljs-type">Object</span> <span class="hljs-variable">target</span> <span class="hljs-operator">=</span> binder.getTarget();        Class&lt;?&gt; targetClass = Objects.requireNonNull(target).getClass();        <span class="hljs-keyword">if</span> (!targetClassRequestParamNameMapping.containsKey(targetClass)) &#123;            targetClassRequestParamNameMapping.put(targetClass, analyzeClass(targetClass));        &#125;        <span class="hljs-type">RequestParamNameDataBinder</span> <span class="hljs-variable">paramNameDataBinder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RequestParamNameDataBinder</span>(target,            binder.getObjectName(), targetClassRequestParamNameMapping.get(targetClass));        webBindingInitializer.initBinder(paramNameDataBinder);        paramNameDataBinder.bind(            Objects.requireNonNull(nativeWebRequest.getNativeRequest(ServletRequest.class)));    &#125;    <span class="hljs-keyword">private</span> Map&lt;String, String&gt; <span class="hljs-title function_">analyzeClass</span><span class="hljs-params">(Class&lt;?&gt; targetClass)</span> &#123;        Map&lt;String, String&gt; renameMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;(<span class="hljs-number">8</span>);        <span class="hljs-keyword">for</span> (Field field : targetClass.getDeclaredFields()) &#123;            <span class="hljs-type">RequestParamName</span> <span class="hljs-variable">requestParamName</span> <span class="hljs-operator">=</span> field.getAnnotation(RequestParamName.class);            <span class="hljs-keyword">if</span> (requestParamName != <span class="hljs-literal">null</span> &amp;&amp; StringUtils.isNotBlank(requestParamName.value())) &#123;                renameMap.put(requestParamName.value(), field.getName());            &#125;        &#125;        <span class="hljs-keyword">if</span> (targetClass.getSuperclass() != Object.class) &#123;            renameMap.putAll(analyzeClass(targetClass.getSuperclass()));        &#125;        <span class="hljs-keyword">return</span> renameMap;    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterPropertiesSet</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;        Assert.notNull(webBindingInitializer, <span class="hljs-string">&quot;webBindingInitializer must not be null!&quot;</span>);    &#125;&#125;</code></pre></div><h3 id="Corresponding-annotation"><a href="#Corresponding-annotation" class="headerlink" title="Corresponding annotation"></a>Corresponding annotation</h3><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Target(ElementType.FIELD)</span><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><span class="hljs-meta">@Documented</span><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> RequestParamName &#123;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 绑定的请求参数名称</span><span class="hljs-comment">     */</span>    String <span class="hljs-title function_">value</span><span class="hljs-params">()</span>;&#125;</code></pre></div><h3 id="Configuring-the-Spring-MVC-ArgumentResolver"><a href="#Configuring-the-Spring-MVC-ArgumentResolver" class="headerlink" title="Configuring the Spring MVC ArgumentResolver"></a>Configuring the Spring MVC ArgumentResolver</h3><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebConfiguration</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span> &#123;    <span class="hljs-meta">@Bean</span>    <span class="hljs-keyword">public</span> RequestParamNameMethodProcessor <span class="hljs-title function_">requestParamNameMethodProcessor</span><span class="hljs-params">()</span> &#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RequestParamNameMethodProcessor</span>(<span class="hljs-literal">true</span>);    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addArgumentResolvers</span><span class="hljs-params">(List&lt;HandlerMethodArgumentResolver&gt; resolvers)</span> &#123;        resolvers.add(requestParamNameMethodProcessor());    &#125;&#125;</code></pre></div><h3 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h3><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PageQuery</span> &#123;        <span class="hljs-meta">@RequestParamName(&quot;current_page&quot;)</span>    <span class="hljs-keyword">private</span> Integer pageNum;        <span class="hljs-meta">@RequestParamName(&quot;page_size&quot;)</span>    <span class="hljs-keyword">private</span> Integer pageSize;&#125;</code></pre></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Question&quot;&gt;&lt;a href=&quot;#Question&quot; class=&quot;headerlink&quot; title=&quot;Question&quot;&gt;&lt;/a&gt;Question&lt;/h2&gt;&lt;p&gt;Spring provides &lt;code&gt;@RequestParam&lt;/code&gt; to </summary>
      
    
    
    
    <category term="spring" scheme="https://okayhu.github.io/blog/categories/spring/"/>
    
    
    <category term="spring" scheme="https://okayhu.github.io/blog/tags/spring/"/>
    
    <category term="springmvc" scheme="https://okayhu.github.io/blog/tags/springmvc/"/>
    
  </entry>
  
  <entry>
    <title>Important Settings For IntelliJ IDEA</title>
    <link href="https://okayhu.github.io/blog/posts/2022/idea-settings/"/>
    <id>https://okayhu.github.io/blog/posts/2022/idea-settings/</id>
    <published>2022-12-17T12:25:15.000Z</published>
    <updated>2023-01-08T14:07:22.189Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>IDEA 2022.3</p></blockquote><h3 id="Cancel-update-check"><a href="#Cancel-update-check" class="headerlink" title="Cancel update check"></a>Cancel update check</h3><p>Settings ⇒ Appearance &amp; Behavior ⇒ System Settings ⇒ Updates</p><p>Uncheck <code>Check IDE update for:</code>.</p><h3 id="Do-not-open-projects-automatically-at-startup"><a href="#Do-not-open-projects-automatically-at-startup" class="headerlink" title="Do not open projects automatically at startup"></a>Do not open projects automatically at startup</h3><p>Settings ⇒ Appearance &amp; Behavior ⇒ System Settings</p><p>Uncheck the <code>Reopen projects on startup</code> in Project.</p><h3 id="Proxy-Settings"><a href="#Proxy-Settings" class="headerlink" title="Proxy Settings"></a>Proxy Settings</h3><p>Settings ⇒ Appearance &amp; Behavior ⇒ System Settings ⇒ Http Proxy</p><p><img src="https://uposs.justokay.cn/images/idea/idea-http-proxy.png"></p><h3 id="Tab-Multi-Row-display"><a href="#Tab-Multi-Row-display" class="headerlink" title="Tab Multi-Row display"></a>Tab Multi-Row display</h3><p>Settings ⇒ Editor ⇒ General ⇒ Editor Tabs</p><p>Uncheck <code>Show tabs in one row</code>.</p><h3 id="Increase-Tab-display"><a href="#Increase-Tab-display" class="headerlink" title="Increase Tab display"></a>Increase Tab display</h3><p>Tabs display up to 10 by default.</p><p>Settings ⇒ Editor ⇒ General ⇒ Editor Tabs</p><p>Modify the <code>Tab limit</code> in the Closing Policy.</p><h3 id="Modify-Tab’s-closing-policy"><a href="#Modify-Tab’s-closing-policy" class="headerlink" title="Modify Tab’s closing policy"></a>Modify Tab’s closing policy</h3><p>By default, closing the Tab will open the Tab on the left, which can optionally be changed to open the most recent Tab.</p><p>Settings ⇒ Editor ⇒ General ⇒ Editor Tabs</p><p>Check <code>Most recently opened tab</code> of <code>When the current tab is closed，activate:</code> in Closing Policy.</p><h3 id="Code-hints-are-not-case-sensitive"><a href="#Code-hints-are-not-case-sensitive" class="headerlink" title="Code hints are not case-sensitive"></a>Code hints are not case-sensitive</h3><p>Settings ⇒ Editor ⇒ General ⇒ Code Completion</p><p>Check <code>Match case</code>。</p><h3 id="Set-the-file-newline-character-to-LF"><a href="#Set-the-file-newline-character-to-LF" class="headerlink" title="Set the file newline character to LF"></a>Set the file newline character to LF</h3><p>Settings ⇒ Editor ⇒ Code style</p><p>Set <code>Line separator</code> in General to <code>Unix and macOS (\n)</code>.</p><h3 id="Set-the-file-encoding-format-to-UTF-8"><a href="#Set-the-file-encoding-format-to-UTF-8" class="headerlink" title="Set the file encoding format to UTF -8"></a>Set the file encoding format to UTF -8</h3><p>Settings ⇒ Editor ⇒ File Encodings</p><p><img src="https://uposs.justokay.cn/images/idea/idea-file-encodings.png"></p><h3 id="Automatic-package-guide-optimization"><a href="#Automatic-package-guide-optimization" class="headerlink" title="Automatic package guide optimization"></a>Automatic package guide optimization</h3><p>Settings ⇒ Editor ⇒ General ⇒ Auto Import</p><p>Check <code>Add unambigouts imports on the fly</code> in Java. When editing code, if there is only one importable declaration with a matching name, the import is automatically added.<br>Check <code>Optimize import on the fly</code> in Java. Removes unused imports and reorders them according to the code style settings.</p><h3 id="Adding-split-lines-between-methods"><a href="#Adding-split-lines-between-methods" class="headerlink" title="Adding split lines between methods"></a>Adding split lines between methods</h3><p>Settings ⇒ Editor ⇒ General ⇒ Appearance</p><p>Check <code>Show method separators</code>。</p><h3 id="Comment-Indent"><a href="#Comment-Indent" class="headerlink" title="Comment Indent"></a>Comment Indent</h3><p>By default, all comments that use the <code>ctrl +/</code> shortcut start at the beginning of the line, without indentation.</p><p><strong>Java</strong></p><p>Settings ⇒ Editor ⇒ Code Style ⇒ Java ⇒ Code Generation</p><p>Uncheck <code>Line Comment at first column</code>. Line comments start at first column<br>Check <code>Add a space at line comment start</code>. Add a space at line comment start<br>Uncheck <code>Block comment at first column</code>. Quick comment starts at first line</p><p><img src="https://uposs.justokay.cn/images/idea/idea-codestyle-java-comment.png"></p><p><strong>XML</strong></p><p>Settings ⇒ Editor ⇒ Code Style ⇒ XML ⇒ Code Generation</p><p>Uncheck <code>Line Comment at first column</code>. line comment starts from first line<br>Uncheck <code>Block comment at first column</code>. fast comment starts from first line</p><p><img src="https://uposs.justokay.cn/images/idea/idea-codestyle-xml-comment.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;IDEA 2022.3&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;Cancel-update-check&quot;&gt;&lt;a href=&quot;#Cancel-update-check&quot; class=&quot;headerlink&quot; title=&quot;Cancel u</summary>
      
    
    
    
    <category term="IntelliJ IDEA" scheme="https://okayhu.github.io/blog/categories/IntelliJ-IDEA/"/>
    
    
    <category term="idea" scheme="https://okayhu.github.io/blog/tags/idea/"/>
    
  </entry>
  
  <entry>
    <title>Generating Entities With Groovy Scripts In IntelliJ IDEA</title>
    <link href="https://okayhu.github.io/blog/posts/2022/idea-database-groovy/"/>
    <id>https://okayhu.github.io/blog/posts/2022/idea-database-groovy/</id>
    <published>2022-11-12T14:14:07.000Z</published>
    <updated>2023-01-08T14:07:22.189Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Connecting-to-Databases"><a href="#Connecting-to-Databases" class="headerlink" title="Connecting to Databases"></a>Connecting to Databases</h3><p>IntelliJ IDEA has most of the features of DataGrip built-in for managing databases, which can be found in the sidebar, Connect to Database.</p><p><img src="https://uposs.justokay.cn/images/idea/idea-database-groovy-01.png"></p><h3 id="Locating-Groovy-script-directories"><a href="#Locating-Groovy-script-directories" class="headerlink" title="Locating Groovy script directories"></a>Locating Groovy script directories</h3><p>IntelliJ IDEA already has several built-in scripts for generating model classes, we can create our own scripts according to our needs.</p><p>Right-click on any table and select Script Extensions - go to Scripts directory.</p><p><img src="https://uposs.justokay.cn/images/idea/idea-database-groovy-02.png"></p><p>Click on <code>Go To Scripts Directory</code> and you will see the built-in scripts, double click on them to edit or add them.</p><p><img src="https://uposs.justokay.cn/images/idea/idea-database-groovy-03.png"></p><h3 id="Writing-Groovy-script-files"><a href="#Writing-Groovy-script-files" class="headerlink" title="Writing Groovy script files"></a>Writing Groovy script files</h3><p>The following script is based on <code>MyBatis-Plus + Lombok</code>:</p><div class="code-wrapper"><pre><code class="hljs groovy"><span class="hljs-keyword">import</span> com.intellij.database.model.DasTable<span class="hljs-keyword">import</span> com.intellij.database.util.Case<span class="hljs-keyword">import</span> com.intellij.database.util.DasUtil<span class="hljs-comment">/*</span><span class="hljs-comment"> * Available context bindings:</span><span class="hljs-comment"> *   SELECTION   Iterable&lt;DasObject&gt;</span><span class="hljs-comment"> *   PROJECT     project</span><span class="hljs-comment"> *   FILES       files helper</span><span class="hljs-comment"> *</span><span class="hljs-comment"> * Tips: the script does  not support the composite primary key</span><span class="hljs-comment"> */</span>packageName = <span class="hljs-string">&quot;&quot;</span>existsPrimaryKey = <span class="hljs-literal">false</span>;primaryKeyAutoGenerated = <span class="hljs-literal">false</span>;typeMapping = [        (<span class="hljs-regexp">~/(?i)tinyint|bool|boolean|bit/</span>)        : <span class="hljs-string">&quot;Boolean&quot;</span>,        (<span class="hljs-regexp">~/(?i)bigint/</span>)                          : <span class="hljs-string">&quot;Long&quot;</span>,        (<span class="hljs-regexp">~/(?i)smallint|mediumint|int|integer/</span>)  : <span class="hljs-string">&quot;Integer&quot;</span>,        (<span class="hljs-regexp">~/(?i)float/</span>)                           : <span class="hljs-string">&quot;Float&quot;</span>,        (<span class="hljs-regexp">~/(?i)double/</span>)                          : <span class="hljs-string">&quot;Double&quot;</span>,        (<span class="hljs-regexp">~/(?i)decimal/</span>)                         : <span class="hljs-string">&quot;BigDecimal&quot;</span>,        (<span class="hljs-regexp">~/(?i)date|datetime|timestamp|time/</span>)    : <span class="hljs-string">&quot;Date&quot;</span>,        (<span class="hljs-regexp">~/(?i)char|varchar|text|json/</span>)          : <span class="hljs-string">&quot;String&quot;</span>,        (<span class="hljs-regexp">~/(?i)blob|binary|bfile|clob|raw|image/</span>): <span class="hljs-string">&quot;InputStream&quot;</span>,        (<span class="hljs-regexp">~/^(?i)/</span>)                               : <span class="hljs-string">&quot;String&quot;</span>]FILES.chooseDirectoryAndSave(<span class="hljs-string">&quot;Choose directory&quot;</span>, <span class="hljs-string">&quot;Choose where to store generated files&quot;</span>) &#123; dir -&gt;    SELECTION.filter &#123; it <span class="hljs-keyword">instanceof</span> DasTable &#125;.each &#123; generate(it, dir) &#125;&#125;<span class="hljs-keyword">def</span> generate(table, dir) &#123;    <span class="hljs-keyword">def</span> className = javaName(table.getName(), <span class="hljs-literal">true</span>)    <span class="hljs-keyword">def</span> fields = calcFields(table)    packageName = getPackageName(dir)    <span class="hljs-keyword">new</span> File(dir, className + <span class="hljs-string">&quot;.java&quot;</span>).withPrintWriter(<span class="hljs-string">&quot;UTF-8&quot;</span>) &#123; out -&gt; generate(out, className, fields, table) &#125;&#125;<span class="hljs-keyword">def</span> generate(out, className, fields, table) &#123;    out.println <span class="hljs-string">&quot;package $packageName&quot;</span>    out.println <span class="hljs-string">&quot;&quot;</span>    Set types = <span class="hljs-keyword">new</span> HashSet()    fields.each() &#123;        types.add(it.type)    &#125;    <span class="hljs-comment">// In the order of IDEA formatting</span>    <span class="hljs-keyword">if</span> (primaryKeyAutoGenerated) &#123;        out.println <span class="hljs-string">&quot;import com.baomidou.mybatisplus.annotation.IdType;&quot;</span>    &#125;    out.println <span class="hljs-string">&quot;import com.baomidou.mybatisplus.annotation.TableField;&quot;</span>    <span class="hljs-keyword">if</span> (existsPrimaryKey) &#123;        out.println <span class="hljs-string">&quot;import com.baomidou.mybatisplus.annotation.TableId;&quot;</span>    &#125;    out.println <span class="hljs-string">&quot;import com.baomidou.mybatisplus.annotation.TableName;&quot;</span>    <span class="hljs-keyword">if</span> (types.contains(<span class="hljs-string">&quot;InputStream&quot;</span>)) &#123;        out.println <span class="hljs-string">&quot;import java.io.InputStream;&quot;</span>    &#125;    <span class="hljs-keyword">if</span> (types.contains(<span class="hljs-string">&quot;BigDecimal&quot;</span>)) &#123;        out.println <span class="hljs-string">&quot;import java.math.BigDecimal;&quot;</span>    &#125;    <span class="hljs-keyword">if</span> (types.contains(<span class="hljs-string">&quot;Date&quot;</span>)) &#123;        out.println <span class="hljs-string">&quot;import java.util.Date;&quot;</span>    &#125;    out.println <span class="hljs-string">&quot;import lombok.Getter;&quot;</span>    out.println <span class="hljs-string">&quot;import lombok.Setter;&quot;</span>    out.println <span class="hljs-string">&quot;import lombok.ToString;&quot;</span>    out.println <span class="hljs-string">&quot;&quot;</span>    out.println <span class="hljs-string">&quot;@Getter&quot;</span>    out.println <span class="hljs-string">&quot;@Setter&quot;</span>    out.println <span class="hljs-string">&quot;@ToString&quot;</span>    out.println <span class="hljs-string">&quot;@TableName(\&quot;&quot;</span> + table.getName() + <span class="hljs-string">&quot;\&quot;)&quot;</span>    out.print <span class="hljs-string">&quot;public class $className &#123;&quot;</span>    out.println <span class="hljs-string">&quot;&quot;</span>    fields.each &#123; it -&gt;        out.println <span class="hljs-string">&quot;&quot;</span>        <span class="hljs-comment">// Print comments</span>        <span class="hljs-keyword">if</span> (isNotEmpty(it.comment)) &#123;            out.println <span class="hljs-string">&quot;    /**&quot;</span>            out.println <span class="hljs-string">&quot;     * $&#123;it.comment.toString()&#125;&quot;</span>            out.println <span class="hljs-string">&quot;     */&quot;</span>        &#125;        <span class="hljs-comment">// Print annotations</span>        it.annos.each &#123; anno -&gt;            out.println <span class="hljs-string">&quot;    $&#123;anno&#125;&quot;</span>        &#125;        out.println <span class="hljs-string">&quot;    private $&#123;it.type&#125; $&#123;it.name&#125;;&quot;</span>    &#125;    out.println <span class="hljs-string">&quot;&#125;&quot;</span>&#125;<span class="hljs-keyword">def</span> calcFields(table) &#123;    DasUtil.getColumns(table).reduce([]) &#123; fields, col -&gt;        <span class="hljs-keyword">def</span> spec = Case.LOWER.apply(col.getDataType().getSpecification())        <span class="hljs-keyword">def</span> typeStr = typeMapping.find &#123; p, t -&gt; p.matcher(spec).find() &#125;.value        <span class="hljs-keyword">def</span> annos = []        <span class="hljs-keyword">if</span> (DasUtil.isPrimary(col)) &#123;            existsPrimaryKey = <span class="hljs-literal">true</span>            <span class="hljs-keyword">if</span> (DasUtil.isAutoGenerated(col)) &#123;                primaryKeyAutoGenerated = <span class="hljs-literal">true</span>                annos += [<span class="hljs-string">&quot;@TableId(value = \&quot;&quot;</span> + col.getName() + <span class="hljs-string">&quot;\&quot;, type = IdType.AUTO)&quot;</span>]            &#125; <span class="hljs-keyword">else</span> &#123;                annos += [<span class="hljs-string">&quot;@TableId(\&quot;&quot;</span> + col.getName() + <span class="hljs-string">&quot;\&quot;)&quot;</span>]            &#125;        &#125; <span class="hljs-keyword">else</span> &#123;            annos += [<span class="hljs-string">&quot;@TableField(\&quot;&quot;</span> + col.getName() + <span class="hljs-string">&quot;\&quot;)&quot;</span>]        &#125;        fields += [[                           <span class="hljs-attr">name   :</span> javaName(col.getName(), <span class="hljs-literal">false</span>),                           <span class="hljs-attr">type   :</span> typeStr,                           <span class="hljs-attr">annos  :</span> annos,                           <span class="hljs-symbol">comment:</span> col.getComment()                   ]]    &#125;&#125;<span class="hljs-keyword">def</span> javaName(str, capitalize) &#123;    str = str.startsWith(<span class="hljs-string">&quot;is_&quot;</span>) ? str.substring(<span class="hljs-number">3</span>) : str    <span class="hljs-keyword">def</span> s = com.intellij.psi.codeStyle.NameUtil.splitNameIntoWords(str)            .collect &#123; Case.LOWER.apply(it).capitalize() &#125;            .join(<span class="hljs-string">&quot;&quot;</span>)            .replaceAll(<span class="hljs-regexp">/[^\p&#123;javaJavaIdentifierPart&#125;[_]]/</span>, <span class="hljs-string">&quot;_&quot;</span>)    capitalize || s.length() == <span class="hljs-number">1</span> ? s : Case.LOWER.apply(s[<span class="hljs-number">0</span>]) + s[<span class="hljs-number">1.</span>.<span class="hljs-number">-1</span>]&#125;<span class="hljs-keyword">static</span> <span class="hljs-keyword">def</span> getPackageName(dir) &#123;    <span class="hljs-keyword">return</span> dir.toString()            .replaceAll(<span class="hljs-string">&quot;\\\\&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>)            .replaceAll(<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>)            .replaceAll(<span class="hljs-string">&quot;^.*src(\\.main\\.java\\.)?&quot;</span>, <span class="hljs-string">&quot;&quot;</span>) + <span class="hljs-string">&quot;;&quot;</span>&#125;<span class="hljs-keyword">static</span> <span class="hljs-keyword">def</span> isNotEmpty(content) &#123;    <span class="hljs-keyword">return</span> content != <span class="hljs-literal">null</span> &amp;&amp; content.toString().trim().length() &gt; <span class="hljs-number">0</span>&#125;</code></pre></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Connecting-to-Databases&quot;&gt;&lt;a href=&quot;#Connecting-to-Databases&quot; class=&quot;headerlink&quot; title=&quot;Connecting to Databases&quot;&gt;&lt;/a&gt;Connecting to Dat</summary>
      
    
    
    
    <category term="IntelliJ IDEA" scheme="https://okayhu.github.io/blog/categories/IntelliJ-IDEA/"/>
    
    
    <category term="idea" scheme="https://okayhu.github.io/blog/tags/idea/"/>
    
    <category term="groovy" scheme="https://okayhu.github.io/blog/tags/groovy/"/>
    
  </entry>
  
  <entry>
    <title>Spring Data JPA Custom Repository Example</title>
    <link href="https://okayhu.github.io/blog/posts/2022/spring-jpa-custom-repository/"/>
    <id>https://okayhu.github.io/blog/posts/2022/spring-jpa-custom-repository/</id>
    <published>2022-08-26T14:16:41.000Z</published>
    <updated>2023-01-08T14:07:22.189Z</updated>
    
    <content type="html"><![CDATA[<p>Spring-Data-JPA provides many common Repository interfaces, such as CrudRepository, PagingAndSortingRepository, JpaRepository and so on. In practical development we often have some custom methods, so how should we extend the Repository interface?</p><h2 id="Base-class"><a href="#Base-class" class="headerlink" title="Base class"></a>Base class</h2><p>First define a BaseRepository that inherits from JpaRepository and write the methods we want to extend</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@NoRepositoryBean</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">BaseRepository</span>&lt;T, ID&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title class_">JpaRepository</span>&lt;T, ID&gt; &#123;    List&lt;T&gt; <span class="hljs-title function_">findByIdIn</span><span class="hljs-params">(Iterable&lt;ID&gt; ids)</span>;    <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteByIdIn</span><span class="hljs-params">(Iterable&lt;ID&gt; ids)</span>;&#125;</code></pre></div><p>The <code>@NoRepositoryBean</code> is used to inform the Spring container not to instantiate the BaseRepository, since the BaseRepository is used as an intermediate interface to derive the concrete Repository interface.</p><p>Next, create an implementation class of the BaseRepository that implements the extended methods</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BaseRepositoryImpl</span>&lt;T, ID&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title class_">SimpleJpaRepository</span>&lt;T, ID&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BaseRepository</span>&lt;T, ID&gt; &#123;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> EntityManager em;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> JpaEntityInformation&lt;T, ?&gt; entityInformation;    <span class="hljs-keyword">public</span> <span class="hljs-title function_">BaseRepositoryImpl</span><span class="hljs-params">(JpaEntityInformation&lt;T, ?&gt; entityInformation, EntityManager entityManager)</span> &#123;        <span class="hljs-built_in">super</span>(entityInformation, entityManager);        <span class="hljs-built_in">this</span>.em = entityManager;        <span class="hljs-built_in">this</span>.entityInformation = entityInformation;    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> List&lt;T&gt; <span class="hljs-title function_">findByIdIn</span><span class="hljs-params">(Iterable&lt;ID&gt; ids)</span> &#123;        <span class="hljs-keyword">return</span> findAllById(ids);    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteById</span><span class="hljs-params">(ID id)</span> &#123;        Assert.notNull(id, <span class="hljs-string">&quot;Id must not be null!&quot;</span>);        <span class="hljs-type">CriteriaBuilder</span> <span class="hljs-variable">builder</span> <span class="hljs-operator">=</span> em.getCriteriaBuilder();        CriteriaDelete&lt;T&gt; delete = builder.createCriteriaDelete(getDomainClass());        Root&lt;T&gt; root = delete.from(getDomainClass());        delete.where(builder.equal(root.get(entityInformation.getIdAttribute()), id));        em.createQuery(delete).executeUpdate();    &#125;    <span class="hljs-meta">@Transactional</span>    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteByIdIn</span><span class="hljs-params">(Iterable&lt;ID&gt; ids)</span> &#123;        Assert.notNull(ids, <span class="hljs-string">&quot;Ids must not be null!&quot;</span>);        <span class="hljs-keyword">if</span> (ids.iterator().hasNext()) &#123;            <span class="hljs-type">CriteriaBuilder</span> <span class="hljs-variable">builder</span> <span class="hljs-operator">=</span> em.getCriteriaBuilder();            CriteriaDelete&lt;T&gt; delete = builder.createCriteriaDelete(getDomainClass());            Root&lt;T&gt; root = delete.from(getDomainClass());            delete.where(getIdsPredicate(builder, root, ids));            em.createQuery(delete).executeUpdate();        &#125;    &#125;    <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span>    <span class="hljs-keyword">protected</span> Predicate <span class="hljs-title function_">getIdsPredicate</span><span class="hljs-params">(CriteriaBuilder builder, Root&lt;T&gt; root, Iterable&lt;ID&gt; ids)</span> &#123;        Path&lt;ID&gt; path = (Path&lt;ID&gt;) root.get(entityInformation.getIdAttribute());        CriteriaBuilder.In&lt;ID&gt; inPredicate = builder.in(path);        ids.forEach(inPredicate::value);        <span class="hljs-keyword">return</span> inPredicate;    &#125;&#125;</code></pre></div><h2 id="Configuration"><a href="#Configuration" class="headerlink" title="Configuration"></a>Configuration</h2><p>Finally we can specify the new repositoryBaseClass on the main class with <code>@EnableJpaRepositories</code></p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@EnableJpaRepositories(repositoryBaseClass = BaseRepositoryImpl.class)</span><span class="hljs-meta">@SpringBootApplication</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JpaExamplesApplication</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;        SpringApplication.run(JpaExamplesApplication.class, args);    &#125;&#125;</code></pre></div><h2 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h2><p>Instead of inheriting from JpaRepository, our Repository interface inherits from BaseRepository</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserRepository</span>&lt;User, Long&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseRepository</span>&lt;User, Long&gt; &#123;&#125;</code></pre></div><p>Next, we test our custom method</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><span class="hljs-keyword">class</span> <span class="hljs-title class_">BaseRepositoryTests</span> &#123;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> UserRepository userRepository;    <span class="hljs-meta">@Test</span>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteByIdIn_test</span><span class="hljs-params">()</span> &#123;userRepository.deleteByIdIn(Arrays.asList(<span class="hljs-number">1L</span>, <span class="hljs-number">2L</span>));    &#125;&#125;</code></pre></div><p>Turn on SQL printing:</p><div class="code-wrapper"><pre><code class="hljs properties"><span class="hljs-attr">spring.jpa.show-sql</span>=<span class="hljs-string">true</span></code></pre></div><p>Console output successfully: <code>Hibernate: delete from user where id in (1 , 2)</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Spring-Data-JPA provides many common Repository interfaces, such as CrudRepository, PagingAndSortingRepository, JpaRepository and so on. </summary>
      
    
    
    
    <category term="Spring" scheme="https://okayhu.github.io/blog/categories/Spring/"/>
    
    
    <category term="spring" scheme="https://okayhu.github.io/blog/tags/spring/"/>
    
    <category term="jpa" scheme="https://okayhu.github.io/blog/tags/jpa/"/>
    
  </entry>
  
  <entry>
    <title>Object References And GC Algorithms In Java</title>
    <link href="https://okayhu.github.io/blog/posts/2022/jvm-object-gc/"/>
    <id>https://okayhu.github.io/blog/posts/2022/jvm-object-gc/</id>
    <published>2022-07-18T14:08:11.000Z</published>
    <updated>2023-01-08T14:07:22.189Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Object-references"><a href="#Object-references" class="headerlink" title="Object references"></a>Object references</h2><p><strong>Strong reference</strong>: We usually new an object is a strong reference, for example <code>Object obj = new Object()</code>. The JVM would rather throw an OutOfMemory error than reclaim such an object, even in the case of insufficient memory.</p><p><strong>Soft reference</strong>: If an object has only a soft reference, there is enough memory space and GC will not reclaim it, or if there is not enough memory, it will be reclaimed before a memory overflow occurs.</p><div class="code-wrapper"><pre><code class="hljs java">SoftReference&lt;String&gt; softRef = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SoftReference</span>&lt;String&gt;(str);</code></pre></div><p><strong>Weak references</strong>: Objects with weak references have a shorter life cycle. When GC performs garbage collection, once an object with only weak references is found, its memory will be reclaimed regardless of whether the current memory space is sufficient.</p><div class="code-wrapper"><pre><code class="hljs java">WeakReference&lt;String&gt; weakRef = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WeakReference</span>&lt;String&gt;(str);</code></pre></div><p><strong>Phantom References</strong>. If an object holds only a phantom reference, it can be reclaimed by GC at any time, just as if it did not have any reference.</p><p>Phantom references are mainly used to track the activity of objects that are GC’d. Phantom references must be used in conjunction with a reference queue (<code>ReferenceQueue</code>). When the GC is ready to reclaim an object, if it finds it to be a phantom reference, it will add the phantom reference to the reference queue associated with it before reclaiming the object’s memory.</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-type">ReferenceQueue</span> <span class="hljs-variable">queue</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReferenceQueue</span>();<span class="hljs-type">PhantomReference</span> <span class="hljs-variable">phantomRef</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PhantomReference</span>(str, queue);</code></pre></div><h2 id="What-is-garbage"><a href="#What-is-garbage" class="headerlink" title="What is garbage"></a>What is garbage</h2><p>An object that doesn’t have any references.</p><h2 id="How-to-tell-when-an-object-doesn’t-have-any-references"><a href="#How-to-tell-when-an-object-doesn’t-have-any-references" class="headerlink" title="How to tell when an object doesn’t have any references"></a>How to tell when an object doesn’t have any references</h2><h2 id="Reference-counter-method"><a href="#Reference-counter-method" class="headerlink" title="Reference counter method"></a>Reference counter method</h2><p>Create a reference counter for each object, +1 when there is a reference to the object, -1 when the reference is released, when the counter is 0 then it can be recycled.</p><div class="note note-info">            <p>The reference counter does not solve the problem of circular applications.</p>          </div><h3 id="Reachability-Analysis-Algorithm"><a href="#Reachability-Analysis-Algorithm" class="headerlink" title="Reachability Analysis Algorithm"></a>Reachability Analysis Algorithm</h3><p>Starting from GC Roots and searching down the path called <code>Reference Chain</code>. When an object is not connected to any reference chain to GC Roots, it is proved that the object is recyclable.</p><p>The objects that are GC Roots include the following (emphasis on the first 4).</p><ul><li><strong>Objects referenced in the virtual machine stack (local variable table in the stack frame); parameters, local variables, temporary variables, etc. used in the method stack of each thread call.</strong></li><li><strong>Objects referenced by static properties of classes in the method area, static variables of reference types of java classes</strong>.</li><li><strong>Objects referenced by constants in the method area. For example: references in the pool of string constants</strong>.</li><li><strong>Objects referenced by JNI (e.g. Native methods) in the local method stack</strong>.</li><li>Internal references of the JVM (class objects, exception objects NullPointException, OutofMemoryError, system class loader).</li><li>All objects held by synchronized locks (synchronized keyword).</li><li>JMXBean inside the JVM, callbacks registered in JVMTI, local code cache, etc.</li><li>Temporary objects in JVM implementations, objects referenced across generations.</li></ul><p>The above recycling are objects, the class (Class) recycling conditions are very demanding, must also meet the following conditions (just can, does not mean necessarily, because there are some parameters can be controlled)</p><ul><li>All instances of the class have been recycled, i.e. there are no instances of the class in the heap.</li><li>The ClassLoader that loaded the class has been recycled.</li><li>The java.lang.Class object corresponding to this class is not referenced anywhere, and the methods of this class cannot be accessed anywhere by reflection.</li></ul><p><code>-Xnoclassgc</code>: Disables garbage collection for the class.</p><p>The recycling of deprecated constants and static variables is actually similar to the conditions for Class recycling.</p><p><strong>Finalize</strong></p><p>The finalize() method in the Object class is similar to the C++ destructor and is used to close external resources and so on. But try-finally and other methods can do better, and the method is expensive to run, uncertain, and does not guarantee the order of calls for each object, so it is better not to use finalize().</p><div class="note note-info">            <p>Executing the finalize() method on an object when it is ready to be recycled only means that <strong>it is possible</strong> to save yourself by having the object referenced again in that method.</p>          </div><h2 id="Garbage-collection-algorithms"><a href="#Garbage-collection-algorithms" class="headerlink" title="Garbage collection algorithms"></a>Garbage collection algorithms</h2><h3 id="Copying-algorithm"><a href="#Copying-algorithm" class="headerlink" title="Copying algorithm"></a>Copying algorithm</h3><p>It divides the available memory into two equal-sized chunks by capacity and uses only one of them at a time. When this block is used up, the remaining objects are copied to the other block, and the used memory space is cleaned up at once.</p><p>The copy recovery algorithm is suitable for new generations. Since most of the objects are born and die, fewer objects are copied over, so it is more efficient.</p><h3 id="Mark-Sweep-algorithm"><a href="#Mark-Sweep-algorithm" class="headerlink" title="Mark-Sweep algorithm"></a>Mark-Sweep algorithm</h3><p>The algorithm is divided into two phases: mark and sweep. First scan out all the objects and mark the objects to be recycled, after the mark is completed, scan and recycle all the marked objects, so it needs to scan twice. When recycling, if there are more objects to be recycled, the more marking and clearing work needs to be done, which is less efficient than replication recycling, so the marking and clearing algorithm is suitable for old age.</p><p>Too much space fragmentation may lead to the inability to find enough contiguous memory when a larger object needs to be allocated later in the program runtime and another garbage collection action has to be triggered earlier.</p><h3 id="Mark-Compact-algorithm"><a href="#Mark-Compact-algorithm" class="headerlink" title="Mark-Compact algorithm"></a>Mark-Compact algorithm</h3><p>The algorithm is divided into two stages: first mark all the objects to be recycled, and after the mark is done, instead of cleaning up the recyclable objects directly, all the surviving objects are compressed into one end of memory so that they are compactly arranged together, and then the memory outside the end boundary is recycled.</p><p>The mark-cleaning algorithm has no memory fragmentation, but it is inefficient. We see that the main difference between the mark-cleaning algorithm and the mark-removal algorithm is object movement. Object movement not only burdens the system, but also requires the entire user thread to be suspended in order to do so, and all references to the object need to be updated (direct pointers need to be adjusted).</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Object-references&quot;&gt;&lt;a href=&quot;#Object-references&quot; class=&quot;headerlink&quot; title=&quot;Object references&quot;&gt;&lt;/a&gt;Object references&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;St</summary>
      
    
    
    
    <category term="Java" scheme="https://okayhu.github.io/blog/categories/Java/"/>
    
    
    <category term="jvm" scheme="https://okayhu.github.io/blog/tags/jvm/"/>
    
  </entry>
  
  <entry>
    <title>Useful Tips For MapStruct</title>
    <link href="https://okayhu.github.io/blog/posts/2022/mapstrcut-style/"/>
    <id>https://okayhu.github.io/blog/posts/2022/mapstrcut-style/</id>
    <published>2022-07-14T14:03:31.000Z</published>
    <updated>2023-01-08T14:07:22.189Z</updated>
    
    <content type="html"><![CDATA[<p>MapStruct is a powerful and convenient pojo conversion tool in our project development process.<br>Although MapStruct is good, there are some problems about its use.</p><h3 id="Do-not-change-to-the-source-object"><a href="#Do-not-change-to-the-source-object" class="headerlink" title="Do not change to the source object"></a>Do not change to the source object</h3><p>e.g. Convert <code>UserDTO</code> to <code>UserVO</code></p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDTO</span> &#123;    <span class="hljs-keyword">private</span> Long id;    <span class="hljs-keyword">private</span> String username;    <span class="hljs-keyword">private</span> Integer age;&#125;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserVO</span> &#123;    <span class="hljs-keyword">private</span> Long id;    <span class="hljs-keyword">private</span> String username;    <span class="hljs-keyword">private</span> Integer age;    <span class="hljs-keyword">private</span> List&lt;RoleVO&gt; roles;    <span class="hljs-keyword">private</span> List&lt;GroupVO&gt; groups;    <span class="hljs-keyword">private</span> List&lt;String&gt; authorityCodes;&#125;<span class="hljs-meta">@Mapper</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserMapper</span> &#123;    UserVO <span class="hljs-title function_">dtoToVo</span><span class="hljs-params">(UserDTO userDto)</span>;    <span class="hljs-meta">@BeforeMapping</span>    <span class="hljs-keyword">default</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterDtoToVo</span><span class="hljs-params">(UserDTO userDto)</span> &#123;        <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;Administrator&quot;</span>.equals(userDto.getUsername())) &#123;            userDto.setId(<span class="hljs-number">0L</span>);            userDto.setAge(<span class="hljs-literal">null</span>);        &#125;    &#125;&#125;</code></pre></div><p>Problem: Creates an unintended exception for the caller of the method.</p><h3 id="Do-not-include-a-lot-of-business-code"><a href="#Do-not-include-a-lot-of-business-code" class="headerlink" title="Do not include a lot of business code"></a>Do not include a lot of business code</h3><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Mapper</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserMapper</span> &#123;    UserVO <span class="hljs-title function_">dtoToVo</span><span class="hljs-params">(UserDTO userDto)</span>;    <span class="hljs-meta">@AfterMapping</span>    <span class="hljs-keyword">default</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterDtoToVo</span><span class="hljs-params">(<span class="hljs-meta">@MappingTarget</span> UserVO userVo)</span> &#123;        <span class="hljs-type">UserService</span> <span class="hljs-variable">userService</span> <span class="hljs-operator">=</span> SpringContextUtil.getBean(UserService.class);        userVo.setAuthorityCodes(userService.getAllAuthorityCodes(userVo.getId()));    &#125;&#125;</code></pre></div><p>Problem:</p><ul><li>Methods in Mapper, to a large extent, will be called multiple times and applied in different domains, so the writer needs to make sure that the expectations of the methods are generic and trusted. In the above example, the converted <code>UserVO</code> does not contain <code>roles</code>、 <code>groups</code>、<code>authorityCodes</code>, but this is not necessarily what is expected for the method caller.</li><li>Once the business logic in the Mapper is modified, it may have a bad impact on multiple locations.</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;MapStruct is a powerful and convenient pojo conversion tool in our project development process.&lt;br&gt;Although MapStruct is good, there are </summary>
      
    
    
    
    <category term="Tool" scheme="https://okayhu.github.io/blog/categories/Tool/"/>
    
    
    <category term="tool" scheme="https://okayhu.github.io/blog/tags/tool/"/>
    
    <category term="mapstruct" scheme="https://okayhu.github.io/blog/tags/mapstruct/"/>
    
  </entry>
  
  <entry>
    <title>Object Creation Process And Memory Layout In Java</title>
    <link href="https://okayhu.github.io/blog/posts/2022/jvm-object-memory/"/>
    <id>https://okayhu.github.io/blog/posts/2022/jvm-object-memory/</id>
    <published>2022-07-04T07:34:20.000Z</published>
    <updated>2023-01-08T14:07:22.189Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Object-creation-process"><a href="#Object-creation-process" class="headerlink" title="Object creation process"></a>Object creation process</h2><p><img src="https://uposs.justokay.cn/images/jvm/jvm-object-memory-01.png"></p><h3 id="Checking-loading"><a href="#Checking-loading" class="headerlink" title="Checking loading"></a>Checking loading</h3><p>First check that the parameters of this instruction locate a symbolic reference to a class in the constant pool (symbolic reference: a symbolic reference describes the referenced target by a set of symbols) and that the class has been loaded, parsed and initialized.</p><h3 id="Allocating-memory"><a href="#Allocating-memory" class="headerlink" title="Allocating memory"></a>Allocating memory</h3><p>The virtual machine will allocate memory for the new object. The task of allocating space for an object is equivalent to partitioning a definite size chunk of memory from the Java heap.</p><p>Allocating memory is done in two ways.</p><ul><li><strong>Pointer collision</strong>: If the memory in the Java heap is absolutely regular, with all used memory on one side and free memory on the other, with a pointer placed in the middle as an indicator of the division point. Then the allocated memory is simply moving that pointer towards the free space by a distance equal to the size of the object, and this allocation is called pointer collision.</li><li><strong>Free List</strong>: If the memory in the Java heap is not regular, and used memory and free memory are interleaved, then there is no way to simply perform pointer collisions, and the virtual machine must maintain a list of which memory blocks are available. When allocating a block from the list that is large enough to be divided among object instances, and updating the record on the list, this allocation is called a free list.</li></ul><div class="note note-info">            <p>The choice of allocation method is determined by whether the Java heap is tidy, which in turn is determined by whether the garbage collector used has compression and tidying. If you use a garbage collector with compressed collation like Serial or ParNew, the system uses pointer collision, which is simple and efficient. If you use a garbage collector like CMS without compressed collation, theoretically you can only use a more complex idle list.</p>          </div><p>The JVM also has to consider concurrency safety when allocating memory, and there are two solutions to this problem:</p><ul><li><code>CAS</code>: The action of allocating memory space is handled synchronously, in fact the VM uses CAS with failure retries to ensure atomicity of update operations.</li><li><code>TLAB (Thread Local Allocation Buffer)</code>.</li><li>Overview: The memory allocation action is divided into different spaces according to threads, i.e., each thread is pre-allocated a small piece of private memory in the Java heap, i.e., the Local Thread Allocation Buffer (TLAB).<ul><li>Step: When the JVM initializes a thread, it also requests a piece of memory of a specified size for the current thread only, so that each thread has a separate Buffer, and if it needs to allocate memory, it will allocate it on its own Buffer. area when the Buffer is running low.</li><li>Parameters: <code>JVM options: -XX:+UseTLAB </code> Allows the use of thread local allocation blocks (TLAB) in the young generation space, enabled by default.</li></ul></li></ul><h3 id="Memory-space-initialization"><a href="#Memory-space-initialization" class="headerlink" title="Memory space initialization"></a>Memory space initialization</h3><p>Note that the virtual machine needs to initialize the allocated memory space to zero values (e.g., 0 for int, false for boolean, etc.) after the memory allocation is completed, not the constructor. This step ensures that the object’s instance fields can be used directly in Java code without being assigned initial values, and that the program can access the zero values corresponding to the data types of these fields.</p><h3 id="Setup"><a href="#Setup" class="headerlink" title="Setup"></a>Setup</h3><p>Next, the virtual machine makes the necessary settings for the object, such as which class the object is an instance of, how to find the class metadata information (Java Classes are represented as class metadata inside the Java hotspot VM), the object’s hash code, the object’s GC generation age, and other information. This information is stored in the object header of the object.</p><h3 id="Object-initialization"><a href="#Object-initialization" class="headerlink" title="Object initialization"></a>Object initialization</h3><p>After all the above work is done, a new object has been created from the VM’s point of view, but from the Java program’s point of view, the object creation has just started and all the fields are still zero-valued. So, in general, the execution of the new instruction is followed by the initialization of the object according to the programmer’s wishes (execution of the <code>init</code> method), so that a truly usable object is fully created.</p><h2 id="Object-memory-allocation-strategy"><a href="#Object-memory-allocation-strategy" class="headerlink" title="Object memory allocation strategy"></a>Object memory allocation strategy</h2><p>Memory allocation for objects is usually done on the Java heap, but with the advent of virtual machine optimization techniques (<code>escaping analysis techniques</code>), in some scenarios it is also done on the stack. Objects are mainly allocated in the Eden area of the new generation, and if a local thread buffer is started, they will be allocated on TLAB according to thread priority. In a few cases, they are also allocated directly on the old generation.</p><p>In general the allocation rules are not 100% fixed, the details depend on which combination of garbage collectors and VM related parameters are involved, but the VM will follow the following general rules for memory allocation.</p><ul><li><strong>Objects are allocated in the Eden area first</strong>, and if there is not enough space in the Eden area, the VM performs a Minor GC.</li><li><strong>Large objects go directly to the old age (large objects are those that require a lot of contiguous memory space)</strong>. This is done to avoid a large number of memory copies occurring between the Eden zone and the two Survivor zones (the new generation uses a replication algorithm to collect memory).</li><li><strong>Long-term surviving objects go to the old generation</strong>. The virtual machine defines an age counter for each object, if the object has survived 1 Minor GC, the object enters the Survivor zone and sets the object age to 1. The age of the object increases by 1 for each Minor GC it survives in the Survivor zone, and when it increases to a certain age (<strong>the concurrent garbage collector defaults to 15, the CMS is 6</strong>), it will be promoted to the old age. This can be adjusted with <code>-XX:MaxTenuringThreshold</code>.</li><li><strong>Dynamically determine the age of an object</strong>. In order to better adapt to the memory situation of different programs, the VM does not always require the age of an object to reach <code>MaxTenuringThreshold</code> before it can be promoted to an older age. If the sum of all objects of the same age in Survivor space is greater than half the size of Survivor space, objects with an age greater than or equal to that age can be directly aged, without waiting for the age required in <code>MaxTenuringThreshold</code>.</li><li><strong>Space Allocation Guarantee</strong>. Before each Minor GC, the VM checks if the maximum available contiguous space in the old age is greater than the total space of all objects in the new age. If this condition is not true, the VM will check if the <code>HandlePromotionFailure</code> setting allows the guarantee to fail. If <code>HandlePromotionFailure=true</code>, then it will continue to check if the maximum available contiguous space in the old age is greater than the average size of objects promoted to the old age over time, and if it is, then a Minor GC will be attempted, but this Minor GC is still risky; if it is less than or <code> HandlePromotionFailure=false</code>, then a Full GC is performed instead.</li></ul><h2 id="Memory-layout-of-objects"><a href="#Memory-layout-of-objects" class="headerlink" title="Memory layout of objects"></a>Memory layout of objects</h2><p><img src="https://uposs.justokay.cn/images/jvm/jvm-object-memory-02.png"></p><p>In the HotSpot VM, the layout of objects stored in memory can be divided into 3 areas: Object Header, Instance Data, and Alignment Padding.</p><h3 id="Object-Header"><a href="#Object-Header" class="headerlink" title="Object Header"></a>Object Header</h3><p>The object header is divided into two parts in the HotSpot virtual machine, one called the Mark Word and the other a type pointer. If the object is an array, there is a piece of data in the object header that is used to record the length of the array.</p><table><thead><tr><th align="center">length</th><th align="center">content</th><th align="center">description</th></tr></thead><tbody><tr><td align="center">32&#x2F;64bit</td><td align="center">Mark Word</td><td align="center">stores the hashcode, bias lock pattern, lock information and GC age of the object.</td></tr><tr><td align="center">32&#x2F;64bit</td><td align="center">Class Metadata Address</td><td align="center">A pointer to the object’s class metadata.</td></tr><tr><td align="center">32&#x2F;64bit</td><td align="center">Array Length</td><td align="center">The length of the array (not necessarily available)</td></tr></tbody></table><h3 id="Instance-Data"><a href="#Instance-Data" class="headerlink" title="Instance Data"></a>Instance Data</h3><p>Instance data is the actual valid information stored in the object, and is also the information about the properties of the object as defined in the program code.</p><h3 id="Alignment-Padding"><a href="#Alignment-Padding" class="headerlink" title="Alignment Padding"></a>Alignment Padding</h3><p>Padding is not necessarily present and has no special meaning; it acts as a placeholder. Since the HotSpot VM’s automatic memory management system requires that the size of an object be an integer multiple of <strong>8 bytes</strong>, alignment padding is needed to fill in other parts of the object’s data when they are not aligned.</p><h2 id="Object-Access-Location"><a href="#Object-Access-Location" class="headerlink" title="Object Access Location"></a>Object Access Location</h2><p>Java programs need to access specific objects in the heap via references on the JVM stack. The way objects are accessed depends on the implementation of the JVM virtual machine. Currently the two dominant access methods are handles and direct pointers.</p><h3 id="Direct-pointers"><a href="#Direct-pointers" class="headerlink" title="Direct pointers"></a>Direct pointers</h3><p>points to an object and represents the starting address of an object in memory. If direct pointer access is used, what is stored in the reference is directly the object address, and then the layout inside the Java heap object must take into account how to place information about accessing the type data.</p><p><img src="https://uposs.justokay.cn/images/jvm/jvm-object-memory-03.png"></p><p>Advantages: fast, saves time overhead of one pointer location. Since object access is very frequent in Java, this type of overhead can add up to a significant implementation cost. this is the approach used in HotSpot.</p><h3 id="Handles"><a href="#Handles" class="headerlink" title="Handles"></a>Handles</h3><p>A handle can be understood as a pointer to a pointer that maintains a pointer to an object. The handle does not point directly to the object, but to the object’s pointer (the handle does not change and points to a fixed memory address), which in turn points to the object’s real memory address. If you use direct handle access, a chunk of memory is divided in the Java heap to serve as a pool of handles, and the reference stores the object’s handle address, which contains information about the specific address of each of the object’s instance data and object type data.</p><p><img src="https://uposs.justokay.cn/images/jvm/jvm-object-memory-04.png"></p><p>Advantage: the reference stores a stable handle address, and when the object is moved (it is very common to move objects during garbage collection), only the instance data pointer in the handle is changed, and the reference itself does not need to be modified.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Object-creation-process&quot;&gt;&lt;a href=&quot;#Object-creation-process&quot; class=&quot;headerlink&quot; title=&quot;Object creation process&quot;&gt;&lt;/a&gt;Object creation p</summary>
      
    
    
    
    <category term="Java" scheme="https://okayhu.github.io/blog/categories/Java/"/>
    
    
    <category term="jvm" scheme="https://okayhu.github.io/blog/tags/jvm/"/>
    
  </entry>
  
  <entry>
    <title>Securing Docker with Firewalld</title>
    <link href="https://okayhu.github.io/blog/posts/2022/docker-firewalld/"/>
    <id>https://okayhu.github.io/blog/posts/2022/docker-firewalld/</id>
    <published>2022-06-30T11:47:12.000Z</published>
    <updated>2023-01-08T14:07:22.189Z</updated>
    
    <content type="html"><![CDATA[<p>Docker firewall uses the underlying iptables, firewalld does not work by default.</p><p>If you want to use firewalld, you need to make the following adjustments.</p><h3 id="Rebuild-DOCKER-USER-chain"><a href="#Rebuild-DOCKER-USER-chain" class="headerlink" title="Rebuild DOCKER-USER chain"></a>Rebuild <code>DOCKER-USER chain</code></h3><p>Even if <code>DOCKER-USER</code> already exists, you need to delete and rebuild</p><div class="code-wrapper"><pre><code class="hljs bash">firewall-cmd --permanent --direct --remove-chain ipv4 filter DOCKER-USERfirewall-cmd --permanent --direct --remove-rules ipv4 filter DOCKER-USERfirewall-cmd --permanent --direct --add-chain ipv4 filter DOCKER-USER</code></pre></div><h3 id="Add-iptables-rule"><a href="#Add-iptables-rule" class="headerlink" title="Add iptables rule"></a>Add iptables rule</h3><div class="code-wrapper"><pre><code class="hljs bash">firewall-cmd --permanent --direct --add-rule ipv4 filter DOCKER-USER 0 -i docker0 -j ACCEPT -m comment --comment <span class="hljs-string">&quot;allows incoming from docker&quot;</span>firewall-cmd --permanent --direct --add-rule ipv4 filter DOCKER-USER 0 -i docker0 -o eth0 -j ACCEPT -m comment --comment <span class="hljs-string">&quot;allows docker to eth0&quot;</span>firewall-cmd --permanent --direct --add-rule ipv4 filter DOCKER-USER 0 -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT -m comment --comment <span class="hljs-string">&quot;allows docker containers to connect to the outside world&quot;</span>firewall-cmd --permanent --direct --add-rule ipv4 filter DOCKER-USER 0 -j RETURN -s 172.17.0.0/16 -m comment --comment <span class="hljs-string">&quot;allow internal docker communication&quot;</span></code></pre></div><h3 id="添加自定义的规则"><a href="#添加自定义的规则" class="headerlink" title="添加自定义的规则"></a>添加自定义的规则</h3><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># Allow the specified ip traffic to pass, replace 1.1.1.1 with the ip you need to pass</span>firewall-cmd --permanent --direct --add-rule ipv4 filter DOCKER-USER 0 -s 1.1.1.1/32 -j ACCEPT<span class="hljs-comment"># Allow the specified ip to access the specified port </span>firewall-cmd --permanent --direct --add-rule ipv4 filter DOCKER-USER 0 -p tcp -m multiport --dports 80,443 -s 1.1.1.1/32 -j ACCEPT<span class="hljs-comment"># Reject other traffic</span>firewall-cmd --permanent --direct --add-rule ipv4 filter DOCKER-USER 10 -j REJECT --reject-with icmp-host-unreachable -m comment --comment <span class="hljs-string">&quot;reject all other traffic&quot;</span></code></pre></div><div class="note note-warn">            <ul><li><code>REJECT</code> rule should be executed at the end</li><li>Do not write multiple IP addresses for the same rule</li><li>If you restart firewalld while Docker is running, then firewalld will remove the DOCKER-USER</li></ul>          </div><h3 id="Reload-the-configuration-and-verify"><a href="#Reload-the-configuration-and-verify" class="headerlink" title="Reload the configuration and verify"></a>Reload the configuration and verify</h3><ul><li>Reload the configuration: <code>firewall-cmd --reload</code></li><li>Verify: <code>iptables -L</code> for DOCKER-USER, or <code>cat /etc/firewalld/direct.xml</code> for direct.</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Docker firewall uses the underlying iptables, firewalld does not work by default.&lt;/p&gt;
&lt;p&gt;If you want to use firewalld, you need to make t</summary>
      
    
    
    
    <category term="Devops" scheme="https://okayhu.github.io/blog/categories/Devops/"/>
    
    
    <category term="docker" scheme="https://okayhu.github.io/blog/tags/docker/"/>
    
    <category term="firewalld" scheme="https://okayhu.github.io/blog/tags/firewalld/"/>
    
  </entry>
  
  <entry>
    <title>Modify The Linux Server SSH Port</title>
    <link href="https://okayhu.github.io/blog/posts/2022/linux-ssh-port-update/"/>
    <id>https://okayhu.github.io/blog/posts/2022/linux-ssh-port-update/</id>
    <published>2022-06-27T01:54:58.000Z</published>
    <updated>2023-01-08T14:07:22.189Z</updated>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p>Environment: Centos 7</p>          </div><h3 id="Back-up-the-ssh-configuration-file"><a href="#Back-up-the-ssh-configuration-file" class="headerlink" title="Back up the ssh configuration file"></a>Back up the ssh configuration file</h3><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">cp</span> /etc/ssh/sshd_config /etc/ssh/sshd_config.bak</code></pre></div><h3 id="Modify-the-default-port"><a href="#Modify-the-default-port" class="headerlink" title="Modify the default port"></a>Modify the default port</h3><div class="code-wrapper"><pre><code class="hljs bash">vi etc/ssh/sshd_config</code></pre></div><p>Change <code>#Port 22</code> to <code>Port 2233</code>, so that the ssh port is changed to 2233</p><h3 id="Restart-sshd-service"><a href="#Restart-sshd-service" class="headerlink" title="Restart sshd service"></a>Restart sshd service</h3><div class="code-wrapper"><pre><code class="hljs bash">systemctl restart sshd</code></pre></div><h2 id="Release-the-new-port"><a href="#Release-the-new-port" class="headerlink" title="Release the new port"></a>Release the new port</h2><div class="code-wrapper"><pre><code class="hljs bash">firewall-cmd --premanent --add-port=2233/tcpfirewall-cmd --reload</code></pre></div>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;note note-success&quot;&gt;
            &lt;p&gt;Environment: Centos 7&lt;/p&gt;
          &lt;/div&gt;

&lt;h3 id=&quot;Back-up-the-ssh-configuration-file&quot;&gt;&lt;a hr</summary>
      
    
    
    
    <category term="Devops" scheme="https://okayhu.github.io/blog/categories/Devops/"/>
    
    
    <category term="linux" scheme="https://okayhu.github.io/blog/tags/linux/"/>
    
    <category term="ssh" scheme="https://okayhu.github.io/blog/tags/ssh/"/>
    
  </entry>
  
  <entry>
    <title>Memory Structure In Java</title>
    <link href="https://okayhu.github.io/blog/posts/2022/jvm-memory-structure/"/>
    <id>https://okayhu.github.io/blog/posts/2022/jvm-memory-structure/</id>
    <published>2022-06-22T13:47:45.000Z</published>
    <updated>2023-01-08T14:07:22.189Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p>Java Virtual Machine (JVM) is an abstract computer, based on a stack architecture, with its own instruction set and memory management. It loads class files, parses, interprets and executes bytecode. The basic structure is as follows.</p><p><img src="https://uposs.justokay.cn/images/jvm/jvm-memory-structure-01.png"></p><p>Java virtual machine divides the memory it manages into regions during the execution of a Java program. As shown in the figure.</p><p><img src="https://uposs.justokay.cn/images/jvm/jvm-memory-structure-02.png"></p><p>The JVM memory structure is divided into three main blocks: heap, stack, and method areas. The heap is the largest area in the JVM and consists of the young and old generations, <strong>which in turn are divided into two parts, the Eden and Survivor areas, which in turn are divided into the From and To areas</strong>, and by default the young generations are allocated in a ratio of <strong>8:1:1</strong>.</p><p>A diagram shows how the memory size of each region can be controlled by the following parameters.</p><p><img src="https://uposs.justokay.cn/images/jvm/jvm-memory-structure-03.png"></p><ul><li><code>Xms</code>: sets the minimum space size of the heap.</li><li><code>Xmx</code>: sets the maximum space size of the heap.</li><li><code>XX:NewSize</code>: set the minimum space size of the new generation.</li><li><code>XX:MaxNewSize</code>: set the maximum space size of the new generation.</li><li><code>XX:PermSize</code>: set the minimum space size of the permanent generation.</li><li><code>XX:MaxPermSize</code>: set the maximum space size of the permanent generation.</li><li><code>Xss</code>: set the stack size of each thread.</li></ul><div class="note note-info">            <p>There is no parameter to set the old age directly, but you can set both heap space size and new generation space size to control it indirectly. (old generation space size &#x3D; heap space size - young generation space size)</p>          </div><h2 id="Heap"><a href="#Heap" class="headerlink" title="Heap"></a>Heap</h2><p>For most applications, the Heap is the largest piece of memory managed by the Java Virtual Machine. The heap is an area of memory that is shared by all threads and is created at virtual machine startup. The sole purpose of this memory area is to hold object instances, and almost all object instances are allocated memory here.</p><p>The heap is the main area managed by GC. If we look at it from the memory recovery point of view, since GC basically uses a generational collection algorithm, the heap can also be subdivided into: new generations and old generations. When let subdivided further, there are also the Eden area, From Survivor area, and To Survivor area.</p><p>According to the Java Virtual Machine specification, the heap can be in a physically discontinuous memory space, as long as it is logically contiguous, just like our disk space. When implemented, it can either be implemented as fixed size or scalable, although the current mainstream VMs are implemented as scalable (controlled by <code>-Xmx</code> and <code>-Xms</code>).</p><p>An OutOfMemoryError exception is thrown if there is no memory left in the heap for instance allocation and the heap can no longer be extended.</p><h2 id="Method-Area"><a href="#Method-Area" class="headerlink" title="Method Area"></a>Method Area</h2><p>Method area, like the heap, is an area of memory shared by all threads. It is used to store data such as class information, constants, static variables, and code compiled by the immediate compiler that has been loaded by the virtual machine.</p><p>For developers used to developing and deploying programs on the HotSpot virtual machine, many would like to refer to the method area as the Permanent Generation, but essentially the two are not equivalent. It is simply because the HotSpot VM design team chose to extend GC generation collection to the method zone, or use the Permanent Generation to implement the method zone.</p><p>The Java Virtual Machine specification is very restrictive on this region, and in addition to not requiring contiguous memory like the heap and having the option to be fixed-sized or scalable, it also has the option to not implement garbage collection. The goal of memory reclamation in this area is mainly for constant pool reclamation and offloading of types. In general, it is difficult to achieve satisfactory results in this area, especially for offloading of types, which is quite demanding, but reclamation of this part of the area is really necessary.</p><div class="note note-info">            <p>Garbage collection is relatively rare in this region, but it is not as permanent as the name of the permanent generation once the data enters the method region.</p>          </div><p>According to the Java Virtual Machine specification, an OutOfMemoryError exception is thrown when the method area cannot meet the memory allocation requirements.</p><h2 id="The-pc-Register"><a href="#The-pc-Register" class="headerlink" title="The pc Register"></a>The pc Register</h2><p>The pc Register is thread private and can be seen as a line number indicator for the bytecode executed by the current thread.</p><p>When the bytecode interpreter is working, it picks and records the next bytecode instruction to be executed by changing the value of the program counter. It is an indicator of the program control flow and is relied upon for branching, looping, skipping, exception handling, thread recovery, etc.</p><ul><li>If a thread is executing a Java method, the program counter records the address of the VM bytecode instruction being executed.</li><li>If a Native method is being executed, the counter value is <code>Undefined</code>.</li></ul><div class="note note-info">            <p>The pc Register is the only area of the Java Virtual Machine specification that does not specify any OutOfMemoryError cases.</p>          </div><h2 id="Java-Virtual-Machine-Stacks"><a href="#Java-Virtual-Machine-Stacks" class="headerlink" title="Java Virtual Machine Stacks"></a>Java Virtual Machine Stacks</h2><p>Each thread has a private java virtual machine stacks<br>that is created and destroyed at the same time as the thread. It holds local variables and partial results, and acts on method calls and returns.<br>The memory of java virtual machine stacks need not be contiguous.</p><p>java virtual machine stacks<br>describes the threaded memory model for Java method execution: each method creates a stack frame (<code>Frames</code>) while executing, which stores information such as local variable tables, operand stacks, dynamic links, method exports, etc. The process of each method from invocation to execution completion corresponds to the process of entering and leaving a stack frame on the Java virtual machine stack.</p><ul><li>Each method corresponds to one stack frame</li><li>The data structure of the stack is <code>FILO</code></li></ul><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;    <span class="hljs-type">Work</span> <span class="hljs-variable">work</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Work</span>();    work.a();&#125;<span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">a</span><span class="hljs-params">()</span> &#123;    b();&#125;<span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">b</span><span class="hljs-params">()</span> &#123;    <span class="hljs-comment">// do something</span>&#125;</code></pre></div><p>Next, let’s analyze the structure of the virtual machine stack frame in detail</p><h3 id="Local-Variables-Table"><a href="#Local-Variables-Table" class="headerlink" title="Local Variables Table"></a>Local Variables Table</h3><p>As the name implies, the local variables table is used to store method parameters and local variables defined within the method. <strong>There are 8 basic data types, the reference type (which is not the same as the object itself, but may be a reference pointer to the object’s start address, a handle to the object or some other location related to the object) and the returnAddress type (which points to the address of a bytecode instruction)</strong>.</p><p>The capacity of the local variables table is the smallest unit of the <code>Variable Slot</code>, with a 32 bit value occupying one Solt and a 64 bit value occupying two consecutive Solts.</p><p>When a method is called, the java virtual machine uses the local variables table to complete the transfer of parameter values to the list of parameter variables, i.e., from real to formal parameters. If an instance method (non-static) is executed, then the variable slot indexed at position 0 in the local variables table is used by default to pass a reference to the instance of the object to which the method belongs (this)</p><p>The maximum capacity (number of Slots) of the local variables table to be allocated for the method is determined in the <code>max_locals</code> data item in the Code property of the method when the Java program is compiled into a Class file.</p><h3 id="Operand-Stacks"><a href="#Operand-Stacks" class="headerlink" title="Operand Stacks"></a>Operand Stacks</h3><p>The operand stack is a <code>LIFO</code>. When a method first starts execution, its operand stack is empty. As the method executes and bytecode instructions are executed, constants or variables are copied from the local variable table or fields of the object instance and written to the operand stack, and then the elements of the stack are stacked out to the local variable table or returned to the method caller as the computation proceeds, i.e., the stack-out&#x2F;stack-in operation. A complete method execution often contains multiple such stack-out&#x2F;stack-in processes.</p><p>Each operand stack has an explicit stack depth for storing values, a 32 bit value can be stored in one unit of stack depth, while a 64 bit value requires 2 units of stack depth.</p><p>The maximum depth of the operand stack is written to the <code>max_stacks</code> data item of the method’s Code property at compile time.</p><h3 id="Dynamic-Linking"><a href="#Dynamic-Linking" class="headerlink" title="Dynamic Linking"></a>Dynamic Linking</h3><p>Each stack frame contains a reference to the method in the runtime constants pool to which the stack frame belongs. This reference is held to support inter-method invocations.</p><h3 id="Method-Invocation-Completion"><a href="#Method-Invocation-Completion" class="headerlink" title="Method Invocation Completion"></a>Method Invocation Completion</h3><p>When a method begins execution, there are only two ways to exit the method.</p><ul><li>When the execution engine encounters a bytecode instruction returned by any of the methods, it exits the method, which is called: <code>Normal Method Invocation Completion</code>.</li><li>If an exception occurs during the execution of a method and is not handled in the method body, it causes the method to exit. This type of exit is called: <code>Abrupt Method Invocation Completion</code>.</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Overview&quot;&gt;&lt;a href=&quot;#Overview&quot; class=&quot;headerlink&quot; title=&quot;Overview&quot;&gt;&lt;/a&gt;Overview&lt;/h2&gt;&lt;p&gt;Java Virtual Machine (JVM) is an abstract comp</summary>
      
    
    
    
    <category term="Java" scheme="https://okayhu.github.io/blog/categories/Java/"/>
    
    
    <category term="jvm" scheme="https://okayhu.github.io/blog/tags/jvm/"/>
    
  </entry>
  
  <entry>
    <title>Installing Nginx with Docker</title>
    <link href="https://okayhu.github.io/blog/posts/2022/nginx-docker-install/"/>
    <id>https://okayhu.github.io/blog/posts/2022/nginx-docker-install/</id>
    <published>2022-06-21T13:28:22.000Z</published>
    <updated>2023-01-08T14:07:22.189Z</updated>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p>Environment: Centos 7</p>          </div><h3 id="Download-and-start-the-image"><a href="#Download-and-start-the-image" class="headerlink" title="Download and start the image"></a>Download and start the image</h3><div class="code-wrapper"><pre><code class="hljs bash">docker run --name nginx -p 80:80 -d nginx:latest</code></pre></div><h3 id="Open-the-port"><a href="#Open-the-port" class="headerlink" title="Open the port"></a>Open the port</h3><p>If port 80 is not open, execute the following command</p><div class="code-wrapper"><pre><code class="hljs bash">firewall-cmd --premanent --add-port=80/tcp<span class="hljs-comment"># You can also open it as a service</span>firewall-cmd --premanent --add-service-=http<span class="hljs-comment"># Reload the configuration</span>firewall-cmd --reload<span class="hljs-comment"># View all open ports</span>firewall-cmd --list-port<span class="hljs-comment"># View all open services</span>firewall-cmd --list-services</code></pre></div><h3 id="Mount-the-configuration"><a href="#Mount-the-configuration" class="headerlink" title="Mount the configuration"></a>Mount the configuration</h3><p>Copy the nginx configuration file and the html file to the host</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment">### Replace /usr/local/docker/nginx/ with the directory you want</span><span class="hljs-built_in">mkdir</span> -p /usr/local/docker/nginx/&#123;conf,<span class="hljs-built_in">log</span>,html&#125;docker <span class="hljs-built_in">cp</span> nginx:/etc/nginx/nginx.conf /usr/local/docker/nginx/conf/nginx.confdocker <span class="hljs-built_in">cp</span> nginx:/etc/nginx/conf.d /usr/local/docker/nginx/conf/conf.ddocker <span class="hljs-built_in">cp</span> nginx:/usr/share/nginx/html /usr/local/docker/nginx/html</code></pre></div><h3 id="Additional-commands"><a href="#Additional-commands" class="headerlink" title="Additional commands"></a>Additional commands</h3><p>Stop and delete the nginx container</p><div class="code-wrapper"><pre><code class="hljs bash">docker stop nginxdocker <span class="hljs-built_in">rm</span> nginx<span class="hljs-comment"># You can delete containers that are still running</span>docker <span class="hljs-built_in">rm</span> -f nginx</code></pre></div><p>Restart the nginx container</p><div class="code-wrapper"><pre><code class="hljs bash">docker run --name nginx -p 80:80 \\\-v /usr/local/docker/nginx/conf/nginx.conf:/etc/nginx/nginx.conf \\\-v /usr/local/docker/nginx/conf/conf.d:/etc/nginx/conf.d \\\-v /usr/local/docker/nginx/html:/usr/share/nginx/html \\\-v /usr/local/docker/nginx/log:/var/log/nginx \\\-d nginx:latest</code></pre></div><p>If you want to modify the nginx configuration, you can directly modify the <code>usr/local/docker/nginx/conf/nginx.conf</code> file, and execute</p><div class="code-wrapper"><pre><code class="hljs bash">docker restart nginx</code></pre></div>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;note note-success&quot;&gt;
            &lt;p&gt;Environment: Centos 7&lt;/p&gt;
          &lt;/div&gt;

&lt;h3 id=&quot;Download-and-start-the-image&quot;&gt;&lt;a href=&quot;#D</summary>
      
    
    
    
    <category term="Devops" scheme="https://okayhu.github.io/blog/categories/Devops/"/>
    
    
    <category term="nginx" scheme="https://okayhu.github.io/blog/tags/nginx/"/>
    
    <category term="docker" scheme="https://okayhu.github.io/blog/tags/docker/"/>
    
  </entry>
  
</feed>
